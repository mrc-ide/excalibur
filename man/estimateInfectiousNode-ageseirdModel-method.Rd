% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ageseird_Methods.R
\name{estimateInfectiousNode,ageseirdModel-method}
\alias{estimateInfectiousNode,ageseirdModel-method}
\title{An S4 method to estimate current state of S, E and I for an age-structured
SEIRD when provided with a total count of deaths so far}
\usage{
\S4method{estimateInfectiousNode}{ageseirdModel}(epiModel, deaths, nderiv, plotDeriv)
}
\arguments{
\item{epiModel}{The epidemic model of class age-SEIRD to have the current state of
S and I estimated.}

\item{deaths}{A matrix of the total death count for this model, up to each of the
changeTimes so far.}

\item{nderiv}{Which derivative to assume is 0.}

\item{plotDeriv}{True/False that tells the function to plot the derivative
of D determined by nderiv.}
}
\value{
An object of class seirdModel with the values for S, E and I updated
for the current state.
}
\description{
Please note that this method does not guarantee that this state would be
generated by the model, given its initial conditions.
This method uses the methods for an SIRD model to calculate S and R
This method also makes the assumption that the sum of the absolute values of
the nth derivatives of D with respect to time is 0. N is set by nderiv with a
default of 8. This equation is then solved for I using optim, hence this
method returns a close but non-exact solution for E and I.
These values are then stored in the list in the slot "currentState".
}
\examples{
#model with time-varying Beta
Betas <- array(NA, dim=c(2,2,2)) #set up array, the first dimension will be time
Betas[1,,] <- matrix(c(1,0.5,
                       0.2,1), nrow=2, byrow = TRUE)
Betas[2,,] <- matrix(c(1,0.1,
                       0,5), nrow=2, byrow = TRUE)
model <- setAgeSIRD(N = c(100,100), Betas = Betas, nrow=2, byrow=TRUE),
Gamma = 1/5, Lambda = 1/2, ProbOfDeath = 1/20, I0 = c(1,1), changeTimes = 5)
#Set the deaths
deaths <- matrix(c(5, 10,
                   10,20), nrow = 1, ncol = 2)
time <- 10
#calculate current state
model <- calculateCurrentState(model, time, deaths)
#return the current state
currentState(model)

}
